---
# tasks file for mediafellows.s3-website-hosting

- name: Name of the website s3 bucket that will be used
  ansible.builtin.debug:
    var: s3_website_bucket_name

- name: Create S3 bucket for website hosting
  amazon.aws.s3_bucket:
    name: "{{ s3_website_bucket_name }}"
    policy: "{{ lookup('template', 's3_read_website_bucket.json.j2') }}"
    tags: "{{ s3_website_bucket_tagging }}"
    state: present
    region: "{{ s3_website_bucket_region }}"
  register: website_bucket

- name: S3 bucket details
  ansible.builtin.debug:
    var: website_bucket
    verbosity: 1

- name: Configure S3 bucket for website hosting
  community.aws.s3_website:
    name: "{{ website_bucket.name }}"
    suffix: "{{ s3_website_root_object }}"
    state: present

- name: Output Website domains
  ansible.builtin.debug:
    var: s3_website_alias_domain_names

# Not using FQCN here yet until https://github.com/ansible-collections/community.aws/pull/293 is fixed, to allow loading own module from local library
- name: Search CloudFront distribution based on alias domain names given (task fails if cloudfront still needs creating)
  community.aws.cloudfront_info:
    distribution: true
    domain_name_alias: "{{ item }}"
  ignore_errors: true
  with_items: "{{ s3_website_alias_domain_names }}"
  register: distribution_search

- name: Make sure role internal facts are set to null in case they have been previously set (to not carry over old values)
  ansible.builtin.set_fact:
    s3_website_existing_distribution_config: null
    s3_website_found_distribution: null
    s3_website_existing_distribution_id: null

- name: Assign first found element to variable
  ansible.builtin.set_fact:
    s3_website_found_distribution: "{{ distribution_search.results | selectattr('failed', 'equalto',  false) | list | first }}"
  when: distribution_search.results | selectattr('failed', 'equalto',  false) | list | length > 0

- name: Extract distribution config if Cloudfront distribution was found
  ansible.builtin.set_fact:
    s3_website_existing_distribution_config: "{{ s3_website_found_distribution.cloudfront.result.Distribution.DistributionConfig }}"
    s3_website_existing_distribution_id: "{{ s3_website_found_distribution.cloudfront.result.DistributionId }}"
  when:
    - s3_website_found_distribution is not none
    - s3_website_found_distribution.cloudfront is defined

- name: Output infos of existing CloudFront distribution (confirm if correct one was matched)
  ansible.builtin.debug:
    msg: "Distribution-ID: {{ s3_website_existing_distribution_id }} | Aliases (CNAMES): {{ s3_website_existing_distribution_config.Aliases.Items }}"
  when:
    - s3_website_existing_distribution_config is not none

- name: Wait to give time to read above message
  ansible.builtin.pause:
    seconds: 15
  when:
    - s3_website_existing_distribution_config is not none

- name: Set caller reference to pre-existing one or generate new one for creating new Cloudfront distribution
  ansible.builtin.set_fact:
    cloudfront_caller_reference: "{{ s3_website_existing_distribution_config.CallerReference | default(generated_cloudfront_caller_reference) }}"

- name: Output caller reference to be used to identify Cloudfront dist
  ansible.builtin.debug:
    var: cloudfront_caller_reference

# Check all params for cloudfront_distribution module here:
# https://docs.ansible.com/ansible/latest/modules/cloudfront_distribution_module.html#parameters
# If s.th. doesn't update as expected see if a purge_xx flag need to be added
- name: Create or update Cloudfront Website distribution
  community.aws.cloudfront_distribution:
    enabled: true
    origins:
      - id: 'S3-{{ s3_website_bucket_name }}'
        domain_name: '{{ s3_website_bucket_name }}.s3-website-{{ s3_website_bucket_region }}.amazonaws.com'
        custom_origin_config:
          origin_protocol_policy: 'http-only'
          http_port: 80
          https_port: 443
        custom_headers: []
    purge_origins: yes
    default_root_object: "{{ s3_website_root_object }}"
    price_class: "{{ s3_website_price_class }}"
    ipv6_enabled: true
    cache_behaviors: []
    default_cache_behavior:
      target_origin_id: 'S3-{{ s3_website_bucket_name }}'
      viewer_protocol_policy: 'redirect-to-https'
      allowed_methods:
        items:
          - HEAD
          - GET
        cached_methods:
          - HEAD
          - GET
      min_ttl: 0
      default_ttl: "{{ s3_website_caching_default_ttl }}"
      max_ttl: "{{ s3_website_caching_max_ttl }}"
      compress: true
      smooth_streaming: false
      forwarded_values:
        query_string: false
        headers: []
        cookies: { forward: 'none' }
        query_string_cache_keys: []
      lambda_function_associations: "{{ s3_website_cloudfront_lambda_functions }}"
      response_headers_policy_id: "{{ s3_website_cloudfront_response_headers_policy_id }}"
      trusted_signers: { enabled: false, items: [] }
    http_version: 'http2'
    custom_error_responses:
      - { error_code: 403, response_page_path: "/{{ s3_website_root_object }}", response_code: '200', error_caching_min_ttl: 300 }
      - { error_code: 404, response_page_path: "/{{ s3_website_root_object }}", response_code: '200', error_caching_min_ttl: 300 }
    aliases: "{{ s3_website_alias_domain_names }}"
    purge_aliases: yes # important, so only specified aliases remain
    viewer_certificate:
      ssl_support_method: 'sni-only'
      minimum_protocol_version: "{{ s3_website_cloudfront_tls_policy }}"
      certificate: "{{ s3_website_certificate_arn }}"
      acm_certificate_arn: "{{ s3_website_certificate_arn }}"
      certificate_source: 'acm'
    comment: 'Created by Ansible s3-website-hosting role'
    caller_reference: "{{ cloudfront_caller_reference }}"
    logging:
      enabled: false
      include_cookies: false
      bucket: ''
      prefix: ''
    tags: "{{ s3_website_cloudfront_tagging }}"
    state: present
  register: cloudfront_website_distribution

- name: Output result diff
  ansible.builtin.debug:
    var: cloudfront_website_distribution.diff

- ansible.builtin.set_fact:
    cloudfront_aliases_diff: []

- name: Look into diff to see if an alias was removed in the update
  ansible.builtin.set_fact:
    cloudfront_aliases_diff: "{{ cloudfront_website_distribution.diff.before.Aliases.Items | difference(cloudfront_website_distribution.diff.after.Aliases.Items) }}"
  when:
    - cloudfront_website_distribution.diff is defined
    - cloudfront_website_distribution.diff.after is defined
    - cloudfront_website_distribution.diff.after.Aliases is defined

- name: Output ALIASES diff after update
  ansible.builtin.debug:
    var: cloudfront_aliases_diff
  when: (cloudfront_aliases_diff | length) > 0

- name: Save Cloudfront Domain and ID in variables
  ansible.builtin.set_fact:
    cloudfront_domain: "{{ cloudfront_website_distribution.domain_name }}"
    cloudfront_id: "{{ cloudfront_website_distribution.id }}"

- name: Output Cloudfront domain
  ansible.builtin.debug:
    var: cloudfront_domain

- name: Output Cloudfront ID
  ansible.builtin.debug:
    var: cloudfront_id

- name: Remove now unused DNS records from Route53 (if aliases were removed from Cloudfront)
  community.aws.route53:
    zone: "{{ item.split('.')[-2:] | join('.') }}"
    record: "{{ item }}"
    type: A
    value: "{{ cloudfront_domain }}"
    alias: yes
    alias_hosted_zone_id: "{{ cloudfront_hosted_zone_id }}"
    state: delete
  with_items: "{{ cloudfront_aliases_diff }}"
  when:
    - (cloudfront_aliases_diff | length) > 0
    - s3_website_create_dns_record

- name: Create DNS alias for CloudFront distribution on Route53 (using second level zone)
  community.aws.route53:
    zone: "{{ item.split('.')[-2:] | join('.') }}"
    record: "{{ item }}"
    type: A
    value: "{{ cloudfront_domain }}"
    alias: yes
    overwrite: yes
    alias_hosted_zone_id: "{{ cloudfront_hosted_zone_id }}"
    state: present
  with_items: '{{ s3_website_alias_domain_names }}'
  when: s3_website_create_dns_record
  ignore_errors: true
  register: cloudfront_website_dns_result

- name: Create DNS alias for CloudFront distribution on Route53 (using third level zone where previous task failed)
  community.aws.route53:
    zone: "{{ item.item.split('.')[-3:] | join('.') }}"
    record: "{{ item.item }}"
    type: A
    value: "{{ cloudfront_domain }}"
    alias: yes
    overwrite: yes
    alias_hosted_zone_id: "{{ cloudfront_hosted_zone_id }}"
    state: present
  with_items: '{{ cloudfront_website_dns_result.results }}'
  when:
    - s3_website_create_dns_record
    - cloudfront_website_dns_result.results is defined
    - item.failed
